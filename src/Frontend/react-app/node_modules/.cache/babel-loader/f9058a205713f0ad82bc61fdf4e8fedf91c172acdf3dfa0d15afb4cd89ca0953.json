{"ast":null,"code":"export async function AdminRequests(type, status) {\n  let addr = 'https://localhost:8080/api/orders';\n  if (type && type !== '' || status && status !== '') {\n    addr += '?';\n    if (type && type !== '') {\n      addr += `type=${encodeURIComponent(type)}`;\n    }\n    if (status && status !== '') {\n      if (type && type !== '') {\n        addr += '&';\n      }\n      addr += `status=${encodeURIComponent(status)}`;\n    }\n  }\n  try {\n    var _localStorage$getItem;\n    const token = (_localStorage$getItem = localStorage.getItem('token')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '';\n    const response = await fetch(addr, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    let res = await response.json();\n    if (!Array.isArray(res) || res.length === 0) {\n      res = [{\n        id: -1,\n        userId: -1,\n        userName: 'empty',\n        employeeId: -1,\n        employeeName: 'empty',\n        orderTypeId: -1,\n        orderContent: 'empty',\n        OrderStatus: -1\n      }];\n    }\n    return res;\n  } catch (error) {\n    var _error$message;\n    if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('Failed to fetch')) {\n      console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\n    } else {\n      console.error('Failed to fetch data from the server:', error.message);\n    }\n    return [{\n      id: -1,\n      userId: -1,\n      employeeId: -1,\n      orderTypeId: -1,\n      orderContent: 'empty'\n    }];\n  }\n}\n_c = AdminRequests;\nvar _c;\n$RefreshReg$(_c, \"AdminRequests\");","map":{"version":3,"names":["AdminRequests","type","status","addr","encodeURIComponent","_localStorage$getItem","token","localStorage","getItem","response","fetch","method","headers","ok","Error","res","json","Array","isArray","length","id","userId","userName","employeeId","employeeName","orderTypeId","orderContent","OrderStatus","error","_error$message","message","includes","console","_c","$RefreshReg$"],"sources":["C:/Users/Kheragacy/source/repos/KtsWebApp/KtsWebApp/react-app/src/components/Admin/Requests/AdminRequests.ts"],"sourcesContent":["interface Request {\r\n  id: number;\r\n  userId: number;\r\n  userName?: string;\r\n  employeeId: number;\r\n  employeeName?: string;\r\n  orderTypeId: number;\r\n  orderContent: string;\r\n  OrderStatus?: number;\r\n}\r\n\r\nexport async function AdminRequests(type?: string | null, status?: string | null): Promise<Request[]> {\r\n  let addr = 'https://localhost:8080/api/orders';\r\n\r\n  if ((type && type !== '') || (status && status !== '')) {\r\n    addr += '?';\r\n    if (type && type !== '') {\r\n      addr += `type=${encodeURIComponent(type)}`;\r\n    }\r\n    if (status && status !== '') {\r\n      if (type && type !== '') {\r\n        addr += '&';\r\n      }\r\n      addr += `status=${encodeURIComponent(status)}`;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const token = localStorage.getItem('token') ?? '';\r\n    const response = await fetch(addr, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    let res: AdminRequest[] = await response.json();\r\n\r\n    if (!Array.isArray(res) || res.length === 0) {\r\n      res = [{\r\n        id: -1,\r\n        userId: -1,\r\n        userName: 'empty',\r\n        employeeId: -1,\r\n        employeeName: 'empty',\r\n        orderTypeId: -1,\r\n        orderContent: 'empty',\r\n        OrderStatus: -1,\r\n      }];\r\n    }\r\n\r\n    return res;\r\n  } catch (error: any) {\r\n    if (error.message?.includes('Failed to fetch')) {\r\n      console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\r\n    } else {\r\n      console.error('Failed to fetch data from the server:', error.message);\r\n    }\r\n\r\n    return [{\r\n      id: -1,\r\n      userId: -1,\r\n      employeeId: -1,\r\n      orderTypeId: -1,\r\n      orderContent: 'empty',\r\n    }];\r\n  }\r\n}\r\n"],"mappings":"AAWA,OAAO,eAAeA,aAAaA,CAACC,IAAoB,EAAEC,MAAsB,EAAsB;EACpG,IAAIC,IAAI,GAAG,mCAAmC;EAE9C,IAAKF,IAAI,IAAIA,IAAI,KAAK,EAAE,IAAMC,MAAM,IAAIA,MAAM,KAAK,EAAG,EAAE;IACtDC,IAAI,IAAI,GAAG;IACX,IAAIF,IAAI,IAAIA,IAAI,KAAK,EAAE,EAAE;MACvBE,IAAI,IAAI,QAAQC,kBAAkB,CAACH,IAAI,CAAC,EAAE;IAC5C;IACA,IAAIC,MAAM,IAAIA,MAAM,KAAK,EAAE,EAAE;MAC3B,IAAID,IAAI,IAAIA,IAAI,KAAK,EAAE,EAAE;QACvBE,IAAI,IAAI,GAAG;MACb;MACAA,IAAI,IAAI,UAAUC,kBAAkB,CAACF,MAAM,CAAC,EAAE;IAChD;EACF;EAEA,IAAI;IAAA,IAAAG,qBAAA;IACF,MAAMC,KAAK,IAAAD,qBAAA,GAAGE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,cAAAH,qBAAA,cAAAA,qBAAA,GAAI,EAAE;IACjD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACP,IAAI,EAAE;MACjCQ,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUN,KAAK;MAClC;IACF,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACP,MAAM,EAAE,CAAC;IAC3D;IAEA,IAAIa,GAAmB,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAE/C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,IAAIA,GAAG,CAACI,MAAM,KAAK,CAAC,EAAE;MAC3CJ,GAAG,GAAG,CAAC;QACLK,EAAE,EAAE,CAAC,CAAC;QACNC,MAAM,EAAE,CAAC,CAAC;QACVC,QAAQ,EAAE,OAAO;QACjBC,UAAU,EAAE,CAAC,CAAC;QACdC,YAAY,EAAE,OAAO;QACrBC,WAAW,EAAE,CAAC,CAAC;QACfC,YAAY,EAAE,OAAO;QACrBC,WAAW,EAAE,CAAC;MAChB,CAAC,CAAC;IACJ;IAEA,OAAOZ,GAAG;EACZ,CAAC,CAAC,OAAOa,KAAU,EAAE;IAAA,IAAAC,cAAA;IACnB,KAAAA,cAAA,GAAID,KAAK,CAACE,OAAO,cAAAD,cAAA,eAAbA,cAAA,CAAeE,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC9CC,OAAO,CAACJ,KAAK,CAAC,mFAAmF,CAAC;IACpG,CAAC,MAAM;MACLI,OAAO,CAACJ,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACE,OAAO,CAAC;IACvE;IAEA,OAAO,CAAC;MACNV,EAAE,EAAE,CAAC,CAAC;MACNC,MAAM,EAAE,CAAC,CAAC;MACVE,UAAU,EAAE,CAAC,CAAC;MACdE,WAAW,EAAE,CAAC,CAAC;MACfC,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ;AACF;AAACO,EAAA,GA5DqBjC,aAAa;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}