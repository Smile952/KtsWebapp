{"ast":null,"code":"export async function AdminRequests({\n  type,\n  status\n}) {\n  var addr = 'https://localhost:8080/api/orders';\n  try {\n    if (type !== null || type !== '' || status !== null || status !== '' || type !== undefined || status !== undefined) {\n      addr += '?';\n      if (type !== null && type !== '') {\n        addr += `type=${type}`;\n      }\n      if (status !== null && status !== '') {\n        if (type !== null && type !== '') {\n          addr += `&`;\n        }\n        addr += `status=${status}`;\n      }\n    }\n    const token = localStorage.getItem('token');\n    const response = await fetch(addr, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    var res = await response.json();\n    if (!Array.isArray(res) || res.length === 0) {\n      res = [{\n        id: -1,\n        userId: -1,\n        userName: 'empty',\n        employeeId: -1,\n        employeeName: 'empty',\n        orderTypeId: -1,\n        orderContent: 'empty',\n        OrderStatus: -1\n      }];\n    }\n    return res;\n  } catch (error) {\n    if (error.message.includes('Failed to fetch')) {\n      console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\n    } else {\n      console.error('Failed to fetch data from the server:', error.message);\n    }\n    return [{\n      id: -1,\n      userId: -1,\n      employeeId: -1,\n      orderTypeId: -1,\n      orderContent: 'empty'\n    }];\n  }\n}\n_c = AdminRequests;\nvar _c;\n$RefreshReg$(_c, \"AdminRequests\");","map":{"version":3,"names":["AdminRequests","type","status","addr","undefined","token","localStorage","getItem","response","fetch","method","headers","ok","Error","res","json","Array","isArray","length","id","userId","userName","employeeId","employeeName","orderTypeId","orderContent","OrderStatus","error","message","includes","console","_c","$RefreshReg$"],"sources":["C:/Users/Kheragacy/source/repos/KtsWebApp/KtsWebApp/react-app/src/components/Admin/Requests/AdminRequests.js"],"sourcesContent":["export async function AdminRequests({ type, status }) {\r\n    var addr = 'https://localhost:8080/api/orders'\r\n    try {\r\n        if (type !== null || type !== '' || status !== null || status !== '' || type !== undefined || status !== undefined) {\r\n\r\n            addr += '?';\r\n            if (type !== null && type !== '') {\r\n                addr += `type=${type}`\r\n            }\r\n            if (status !== null && status !== '') {\r\n                if (type !== null && type !== '') {\r\n                    addr += `&`\r\n                }\r\n                addr += `status=${status}`\r\n            }\r\n        }\r\n        const token = localStorage.getItem('token')\r\n        const response = await fetch(addr, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        var res = await response.json();\r\n\r\n        if (!Array.isArray(res) || res.length === 0) {\r\n            res = [{\r\n                id: -1,\r\n                userId: -1,\r\n                userName: 'empty',\r\n                employeeId: -1,\r\n                employeeName: 'empty',\r\n                orderTypeId: -1,\r\n                orderContent: 'empty',\r\n                OrderStatus: -1\r\n            }];\r\n        }\r\n        return res;\r\n    } catch (error) {\r\n        if (error.message.includes('Failed to fetch')) {\r\n            console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\r\n        } else {\r\n            console.error('Failed to fetch data from the server:', error.message);\r\n        }\r\n\r\n        return [{\r\n            id: -1,\r\n            userId: -1,\r\n            employeeId: -1,\r\n            orderTypeId: -1,\r\n            orderContent: 'empty'\r\n        }];\r\n    }\r\n}"],"mappings":"AAAA,OAAO,eAAeA,aAAaA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAE;EAClD,IAAIC,IAAI,GAAG,mCAAmC;EAC9C,IAAI;IACA,IAAIF,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,EAAE,IAAIC,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,EAAE,IAAID,IAAI,KAAKG,SAAS,IAAIF,MAAM,KAAKE,SAAS,EAAE;MAEhHD,IAAI,IAAI,GAAG;MACX,IAAIF,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,EAAE,EAAE;QAC9BE,IAAI,IAAI,QAAQF,IAAI,EAAE;MAC1B;MACA,IAAIC,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,EAAE,EAAE;QAClC,IAAID,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,EAAE,EAAE;UAC9BE,IAAI,IAAI,GAAG;QACf;QACAA,IAAI,IAAI,UAAUD,MAAM,EAAE;MAC9B;IACJ;IACA,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,IAAI,EAAE;MAC/BO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUN,KAAK;MACpC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACN,MAAM,EAAE,CAAC;IAC7D;IAEA,IAAIY,GAAG,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAE/B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,IAAIA,GAAG,CAACI,MAAM,KAAK,CAAC,EAAE;MACzCJ,GAAG,GAAG,CAAC;QACHK,EAAE,EAAE,CAAC,CAAC;QACNC,MAAM,EAAE,CAAC,CAAC;QACVC,QAAQ,EAAE,OAAO;QACjBC,UAAU,EAAE,CAAC,CAAC;QACdC,YAAY,EAAE,OAAO;QACrBC,WAAW,EAAE,CAAC,CAAC;QACfC,YAAY,EAAE,OAAO;QACrBC,WAAW,EAAE,CAAC;MAClB,CAAC,CAAC;IACN;IACA,OAAOZ,GAAG;EACd,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC3CC,OAAO,CAACH,KAAK,CAAC,mFAAmF,CAAC;IACtG,CAAC,MAAM;MACHG,OAAO,CAACH,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACC,OAAO,CAAC;IACzE;IAEA,OAAO,CAAC;MACJT,EAAE,EAAE,CAAC,CAAC;MACNC,MAAM,EAAE,CAAC,CAAC;MACVE,UAAU,EAAE,CAAC,CAAC;MACdE,WAAW,EAAE,CAAC,CAAC;MACfC,YAAY,EAAE;IAClB,CAAC,CAAC;EACN;AACJ;AAACM,EAAA,GA1DqB/B,aAAa;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}