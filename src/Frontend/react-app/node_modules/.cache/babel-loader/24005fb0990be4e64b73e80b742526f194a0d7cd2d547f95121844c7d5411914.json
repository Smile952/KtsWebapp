{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils } from \"./useUtils.js\";\n/**\n * Hooks controlling the value while making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\nexport const useControlledValue = _ref => {\n  let {\n    name,\n    timezone: timezoneProp,\n    value: valueProp,\n    defaultValue,\n    referenceDate,\n    onChange: onChangeProp,\n    valueManager\n  } = _ref;\n  const utils = useUtils();\n  const [valueWithInputTimezone, setValue] = useControlled({\n    name,\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue ?? valueManager.emptyValue\n  });\n  const inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, valueWithInputTimezone), [utils, valueManager, valueWithInputTimezone]);\n  const setInputTimezone = useEventCallback(newValue => {\n    if (inputTimezone == null) {\n      return newValue;\n    }\n    return valueManager.setTimezone(utils, inputTimezone, newValue);\n  });\n  const timezoneToRender = React.useMemo(() => {\n    if (timezoneProp) {\n      return timezoneProp;\n    }\n    if (inputTimezone) {\n      return inputTimezone;\n    }\n    if (referenceDate) {\n      return utils.getTimezone(referenceDate);\n    }\n    return 'default';\n  }, [timezoneProp, inputTimezone, referenceDate, utils]);\n  const valueWithTimezoneToRender = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, valueWithInputTimezone), [valueManager, utils, timezoneToRender, valueWithInputTimezone]);\n  const handleValueChange = useEventCallback(function (newValue) {\n    const newValueWithInputTimezone = setInputTimezone(newValue);\n    setValue(newValueWithInputTimezone);\n    for (var _len = arguments.length, otherParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      otherParams[_key - 1] = arguments[_key];\n    }\n    onChangeProp?.(newValueWithInputTimezone, ...otherParams);\n  });\n  return {\n    value: valueWithTimezoneToRender,\n    handleValueChange,\n    timezone: timezoneToRender\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}