{"ast":null,"code":"import { rout } from \"common/addr\";\nexport async function AdminEmployees() {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(rout + '/employees', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    let res = await response.json();\n    if (!Array.isArray(res)) {\n      throw new Error('Response is not an array');\n    }\n    const employees = res.map(item => ({\n      id: typeof item.id === 'number' ? item.id : -1,\n      name: typeof item.name === 'string' ? item.name : 'empty',\n      post: typeof item.post === 'string' ? item.post : 'empty'\n    }));\n    return employees.length > 0 ? employees : [{\n      id: -1,\n      name: 'empty',\n      post: 'empty'\n    }];\n  } catch (error) {\n    if (typeof error.message === 'string' && error.message.includes('Failed to fetch')) {\n      console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\n    } else {\n      console.error('Failed to fetch data from the server:', (error === null || error === void 0 ? void 0 : error.message) || error);\n    }\n    return [{\n      id: -1,\n      name: 'empty',\n      post: 'empty'\n    }];\n  }\n}\n_c = AdminEmployees;\nvar _c;\n$RefreshReg$(_c, \"AdminEmployees\");","map":{"version":3,"names":["rout","AdminEmployees","token","localStorage","getItem","response","fetch","method","headers","ok","Error","status","res","json","Array","isArray","employees","map","item","id","name","post","length","error","message","includes","console","_c","$RefreshReg$"],"sources":["C:/Users/Kheragacy/source/repos/KtsWebApp/src/Frontend/react-app/src/components/Admin/Employees/AdminEmployees.tsx"],"sourcesContent":["import { rout } from \"common/addr\";\r\n\r\ninterface Employee {\r\n    id: number;\r\n    name: string;\r\n    post: string;\r\n}\r\n\r\nexport async function AdminEmployees(): Promise<Employee[]> {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(rout + '/employees', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        let res: unknown = await response.json();\r\n\r\n        if (!Array.isArray(res)) {\r\n            throw new Error('Response is not an array');\r\n        }\r\n\r\n        const employees: Employee[] = res.map((item) => ({\r\n            id: typeof item.id === 'number' ? item.id : -1,\r\n            name: typeof item.name === 'string' ? item.name : 'empty',\r\n            post: typeof item.post === 'string' ? item.post : 'empty',\r\n        }));\r\n\r\n        return employees.length > 0 ? employees : [{\r\n            id: -1,\r\n            name: 'empty',\r\n            post: 'empty',\r\n        }];\r\n    } catch (error: any) {\r\n        if (typeof error.message === 'string' && error.message.includes('Failed to fetch')) {\r\n            console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\r\n        } else {\r\n            console.error('Failed to fetch data from the server:', error?.message || error);\r\n        }\r\n\r\n        return [{\r\n            id: -1,\r\n            name: 'empty',\r\n            post: 'empty',\r\n        }];\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,aAAa;AAQlC,OAAO,eAAeC,cAAcA,CAAA,EAAwB;EACxD,IAAI;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,IAAI,GAAG,YAAY,EAAE;MAC9CO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUN,KAAK;MACpC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC7D;IAEA,IAAIC,GAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAExC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;MACrB,MAAM,IAAIF,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IAEA,MAAMM,SAAqB,GAAGJ,GAAG,CAACK,GAAG,CAAEC,IAAI,KAAM;MAC7CC,EAAE,EAAE,OAAOD,IAAI,CAACC,EAAE,KAAK,QAAQ,GAAGD,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;MAC9CC,IAAI,EAAE,OAAOF,IAAI,CAACE,IAAI,KAAK,QAAQ,GAAGF,IAAI,CAACE,IAAI,GAAG,OAAO;MACzDC,IAAI,EAAE,OAAOH,IAAI,CAACG,IAAI,KAAK,QAAQ,GAAGH,IAAI,CAACG,IAAI,GAAG;IACtD,CAAC,CAAC,CAAC;IAEH,OAAOL,SAAS,CAACM,MAAM,GAAG,CAAC,GAAGN,SAAS,GAAG,CAAC;MACvCG,EAAE,EAAE,CAAC,CAAC;MACNC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOE,KAAU,EAAE;IACjB,IAAI,OAAOA,KAAK,CAACC,OAAO,KAAK,QAAQ,IAAID,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAChFC,OAAO,CAACH,KAAK,CAAC,mFAAmF,CAAC;IACtG,CAAC,MAAM;MACHG,OAAO,CAACH,KAAK,CAAC,uCAAuC,EAAE,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,OAAO,KAAID,KAAK,CAAC;IACnF;IAEA,OAAO,CAAC;MACJJ,EAAE,EAAE,CAAC,CAAC;MACNC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;AACJ;AAACM,EAAA,GA5CqB1B,cAAc;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}