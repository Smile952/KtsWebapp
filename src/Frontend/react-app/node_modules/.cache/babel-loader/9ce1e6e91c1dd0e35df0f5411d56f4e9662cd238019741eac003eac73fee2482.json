{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"elements\", \"areAllSectionsEmpty\", \"defaultValue\", \"label\", \"value\", \"onChange\", \"id\", \"autoFocus\", \"endAdornment\", \"startAdornment\", \"renderSuffix\", \"slots\", \"slotProps\", \"contentEditable\", \"tabIndex\", \"onInput\", \"onPaste\", \"onKeyDown\", \"fullWidth\", \"name\", \"readOnly\", \"inputProps\", \"inputRef\", \"sectionListRef\", \"onFocus\", \"onBlur\", \"classes\", \"ownerState\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormControl } from '@mui/material/FormControl';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { refType } from '@mui/utils';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '@mui/utils/capitalize';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport visuallyHidden from '@mui/utils/visuallyHidden';\nimport { pickersInputBaseClasses, getPickersInputBaseUtilityClass } from \"./pickersInputBaseClasses.js\";\nimport { Unstable_PickersSectionList as PickersSectionList, Unstable_PickersSectionListRoot as PickersSectionListRoot, Unstable_PickersSectionListSection as PickersSectionListSection, Unstable_PickersSectionListSectionSeparator as PickersSectionListSectionSeparator, Unstable_PickersSectionListSectionContent as PickersSectionListSectionContent } from \"../../PickersSectionList/index.js\";\nimport { usePickerTextFieldOwnerState } from \"../usePickerTextFieldOwnerState.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst round = value => Math.round(value * 1e5) / 1e5;\nexport const PickersInputBaseRoot = styled('div', {\n  name: 'MuiPickersInputBase',\n  slot: 'Root'\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  color: (theme.vars || theme).palette.text.primary,\n  cursor: 'text',\n  padding: 0,\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  position: 'relative',\n  boxSizing: 'border-box',\n  // Prevent padding issue with fullWidth.\n  letterSpacing: `${round(0.15 / 16)}em`,\n  variants: [{\n    props: {\n      isInputInFullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }]\n}));\nexport const PickersInputBaseSectionsContainer = styled(PickersSectionListRoot, {\n  name: 'MuiPickersInputBase',\n  slot: 'SectionsContainer'\n})(({\n  theme\n}) => ({\n  padding: '4px 0 5px',\n  fontFamily: theme.typography.fontFamily,\n  fontSize: 'inherit',\n  lineHeight: '1.4375em',\n  // 23px\n  flexGrow: 1,\n  outline: 'none',\n  display: 'flex',\n  flexWrap: 'nowrap',\n  overflow: 'hidden',\n  letterSpacing: 'inherit',\n  // Baseline behavior\n  width: '182px',\n  variants: [{\n    props: {\n      fieldDirection: 'rtl'\n    },\n    style: {\n      textAlign: 'right /*! @noflip */'\n    }\n  }, {\n    props: {\n      inputSize: 'small'\n    },\n    style: {\n      paddingTop: 1\n    }\n  }, {\n    props: {\n      hasStartAdornment: false,\n      isFieldFocused: false,\n      isFieldValueEmpty: true\n    },\n    style: {\n      color: 'currentColor',\n      opacity: 0\n    }\n  }, {\n    props: {\n      hasStartAdornment: false,\n      isFieldFocused: false,\n      isFieldValueEmpty: true,\n      inputHasLabel: false\n    },\n    style: theme.vars ? {\n      opacity: theme.vars.opacity.inputPlaceholder\n    } : {\n      opacity: theme.palette.mode === 'light' ? 0.42 : 0.5\n    }\n  }]\n}));\nconst PickersInputBaseSection = styled(PickersSectionListSection, {\n  name: 'MuiPickersInputBase',\n  slot: 'Section'\n})(({\n  theme\n}) => ({\n  fontFamily: theme.typography.fontFamily,\n  fontSize: 'inherit',\n  letterSpacing: 'inherit',\n  lineHeight: '1.4375em',\n  // 23px\n  display: 'inline-block',\n  whiteSpace: 'nowrap'\n}));\nconst PickersInputBaseSectionContent = styled(PickersSectionListSectionContent, {\n  name: 'MuiPickersInputBase',\n  slot: 'SectionContent',\n  overridesResolver: (props, styles) => styles.content // FIXME: Inconsistent naming with slot\n})(({\n  theme\n}) => ({\n  fontFamily: theme.typography.fontFamily,\n  lineHeight: '1.4375em',\n  // 23px\n  letterSpacing: 'inherit',\n  width: 'fit-content',\n  outline: 'none'\n}));\nconst PickersInputBaseSectionSeparator = styled(PickersSectionListSectionSeparator, {\n  name: 'MuiPickersInputBase',\n  slot: 'Separator'\n})(() => ({\n  whiteSpace: 'pre',\n  letterSpacing: 'inherit'\n}));\nconst PickersInputBaseInput = styled('input', {\n  name: 'MuiPickersInputBase',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.hiddenInput // FIXME: Inconsistent naming with slot\n})(_extends({}, visuallyHidden));\nconst PickersInputBaseActiveBar = styled('div', {\n  name: 'MuiPickersInputBase',\n  slot: 'ActiveBar'\n})(({\n  theme,\n  ownerState\n}) => ({\n  display: 'none',\n  position: 'absolute',\n  height: 2,\n  bottom: 2,\n  borderTopLeftRadius: 2,\n  borderTopRightRadius: 2,\n  transition: theme.transitions.create(['width', 'left'], {\n    duration: theme.transitions.duration.shortest\n  }),\n  backgroundColor: (theme.vars || theme).palette.primary.main,\n  '[data-active-range-position=\"start\"] &, [data-active-range-position=\"end\"] &': {\n    display: 'block'\n  },\n  '[data-active-range-position=\"start\"] &': {\n    left: ownerState.sectionOffsets[0]\n  },\n  '[data-active-range-position=\"end\"] &': {\n    left: ownerState.sectionOffsets[1]\n  }\n}));\nconst useUtilityClasses = (classes, ownerState) => {\n  const {\n    isFieldFocused,\n    isFieldDisabled,\n    isFieldReadOnly,\n    hasFieldError,\n    inputSize,\n    isInputInFullWidth,\n    inputColor,\n    hasStartAdornment,\n    hasEndAdornment\n  } = ownerState;\n  const slots = {\n    root: ['root', isFieldFocused && !isFieldDisabled && 'focused', isFieldDisabled && 'disabled', isFieldReadOnly && 'readOnly', hasFieldError && 'error', isInputInFullWidth && 'fullWidth', `color${capitalize(inputColor)}`, inputSize === 'small' && 'inputSizeSmall', hasStartAdornment && 'adornedStart', hasEndAdornment && 'adornedEnd'],\n    notchedOutline: ['notchedOutline'],\n    input: ['input'],\n    sectionsContainer: ['sectionsContainer'],\n    sectionContent: ['sectionContent'],\n    sectionBefore: ['sectionBefore'],\n    sectionAfter: ['sectionAfter'],\n    activeBar: ['activeBar']\n  };\n  return composeClasses(slots, getPickersInputBaseUtilityClass, classes);\n};\nfunction resolveSectionElementWidth(sectionElement, rootRef, index, dateRangePosition) {\n  if (sectionElement.content.id) {\n    const activeSectionElements = rootRef.current?.querySelectorAll(`[data-sectionindex=\"${index}\"] [data-range-position=\"${dateRangePosition}\"]`);\n    if (activeSectionElements) {\n      return Array.from(activeSectionElements).reduce((currentActiveBarWidth, element) => {\n        return currentActiveBarWidth + element.offsetWidth;\n      }, 0);\n    }\n  }\n  return 0;\n}\nfunction resolveSectionWidthAndOffsets(elements, rootRef) {\n  let activeBarWidth = 0;\n  const activeRangePosition = rootRef.current?.getAttribute('data-active-range-position');\n  if (activeRangePosition === 'end') {\n    for (let i = elements.length - 1; i >= elements.length / 2; i -= 1) {\n      activeBarWidth += resolveSectionElementWidth(elements[i], rootRef, i, 'end');\n    }\n  } else {\n    for (let i = 0; i < elements.length / 2; i += 1) {\n      activeBarWidth += resolveSectionElementWidth(elements[i], rootRef, i, 'start');\n    }\n  }\n  return {\n    activeBarWidth,\n    sectionOffsets: [rootRef.current?.querySelector(`[data-sectionindex=\"0\"]`)?.offsetLeft || 0, rootRef.current?.querySelector(`[data-sectionindex=\"${elements.length / 2}\"]`)?.offsetLeft || 0]\n  };\n}\n\n/**\n * @ignore - internal component.\n */\nconst PickersInputBase = /*#__PURE__*/React.forwardRef(function PickersInputBase(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiPickersInputBase'\n  });\n  const {\n      elements,\n      areAllSectionsEmpty,\n      value,\n      onChange,\n      id,\n      endAdornment,\n      startAdornment,\n      renderSuffix,\n      slots,\n      slotProps,\n      contentEditable,\n      tabIndex,\n      onInput,\n      onPaste,\n      onKeyDown,\n      name,\n      readOnly,\n      inputProps,\n      inputRef,\n      sectionListRef,\n      onFocus,\n      onBlur,\n      classes: classesProp,\n      ownerState: ownerStateProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerStateContext = usePickerTextFieldOwnerState();\n  const rootRef = React.useRef(null);\n  const activeBarRef = React.useRef(null);\n  const sectionOffsetsRef = React.useRef([]);\n  const handleRootRef = useForkRef(ref, rootRef);\n  const handleInputRef = useForkRef(inputProps?.ref, inputRef);\n  const muiFormControl = useFormControl();\n  if (!muiFormControl) {\n    throw new Error('MUI X: PickersInputBase should always be used inside a PickersTextField component');\n  }\n  const ownerState = ownerStateProp ?? ownerStateContext;\n  const handleInputFocus = event => {\n    muiFormControl.onFocus?.(event);\n    onFocus?.(event);\n  };\n  const handleHiddenInputFocus = event => {\n    handleInputFocus(event);\n  };\n  const handleKeyDown = event => {\n    onKeyDown?.(event);\n    if (event.key === 'Enter' && !event.defaultMuiPrevented) {\n      // Do nothing if it's a multi input field\n      if (rootRef.current?.dataset.multiInput) {\n        return;\n      }\n      const closestForm = rootRef.current?.closest('form');\n      const submitTrigger = closestForm?.querySelector('[type=\"submit\"]');\n      if (!closestForm || !submitTrigger) {\n        // do nothing if there is no form or no submit button (trigger)\n        return;\n      }\n      event.preventDefault();\n      // native input trigger submit with the `submitter` field set\n      closestForm.requestSubmit(submitTrigger);\n    }\n  };\n  const handleInputBlur = event => {\n    muiFormControl.onBlur?.(event);\n    onBlur?.(event);\n  };\n  React.useEffect(() => {\n    if (muiFormControl) {\n      muiFormControl.setAdornedStart(Boolean(startAdornment));\n    }\n  }, [muiFormControl, startAdornment]);\n  React.useEffect(() => {\n    if (!muiFormControl) {\n      return;\n    }\n    if (areAllSectionsEmpty) {\n      muiFormControl.onEmpty();\n    } else {\n      muiFormControl.onFilled();\n    }\n  }, [muiFormControl, areAllSectionsEmpty]);\n  const classes = useUtilityClasses(classesProp, ownerState);\n  const InputRoot = slots?.root || PickersInputBaseRoot;\n  const inputRootProps = useSlotProps({\n    elementType: InputRoot,\n    externalSlotProps: slotProps?.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      'aria-invalid': muiFormControl.error,\n      ref: handleRootRef\n    },\n    className: classes.root,\n    ownerState\n  });\n  const InputSectionsContainer = slots?.input || PickersInputBaseSectionsContainer;\n  const isSingleInputRange = elements.some(element => element.content['data-range-position'] !== undefined);\n  React.useEffect(() => {\n    if (!isSingleInputRange || !ownerState.isPickerOpen) {\n      return;\n    }\n    const {\n      activeBarWidth,\n      sectionOffsets\n    } = resolveSectionWidthAndOffsets(elements, rootRef);\n    sectionOffsetsRef.current = [sectionOffsets[0], sectionOffsets[1]];\n    if (activeBarRef.current) {\n      activeBarRef.current.style.width = `${activeBarWidth}px`;\n    }\n  }, [elements, isSingleInputRange, ownerState.isPickerOpen]);\n  return /*#__PURE__*/_jsxs(InputRoot, _extends({}, inputRootProps, {\n    children: [startAdornment, /*#__PURE__*/_jsx(PickersSectionList, {\n      sectionListRef: sectionListRef,\n      elements: elements,\n      contentEditable: contentEditable,\n      tabIndex: tabIndex,\n      className: classes.sectionsContainer,\n      onFocus: handleInputFocus,\n      onBlur: handleInputBlur,\n      onInput: onInput,\n      onPaste: onPaste,\n      onKeyDown: handleKeyDown,\n      slots: {\n        root: InputSectionsContainer,\n        section: PickersInputBaseSection,\n        sectionContent: PickersInputBaseSectionContent,\n        sectionSeparator: PickersInputBaseSectionSeparator\n      },\n      slotProps: {\n        root: _extends({}, slotProps?.input, {\n          ownerState\n        }),\n        sectionContent: {\n          className: pickersInputBaseClasses.sectionContent\n        },\n        sectionSeparator: ({\n          separatorPosition\n        }) => ({\n          className: separatorPosition === 'before' ? pickersInputBaseClasses.sectionBefore : pickersInputBaseClasses.sectionAfter\n        })\n      }\n    }), endAdornment, renderSuffix ? renderSuffix(_extends({}, muiFormControl)) : null, /*#__PURE__*/_jsx(PickersInputBaseInput, _extends({\n      name: name,\n      className: classes.input,\n      value: value,\n      onChange: onChange,\n      id: id,\n      \"aria-hidden\": \"true\",\n      tabIndex: -1,\n      readOnly: readOnly,\n      required: muiFormControl.required,\n      disabled: muiFormControl.disabled\n      // Hidden input element cannot be focused, trigger the root focus instead\n      // This allows to maintain the ability to do `inputRef.current.focus()` to focus the field\n      ,\n\n      onFocus: handleHiddenInputFocus\n    }, inputProps, {\n      ref: handleInputRef\n    })), isSingleInputRange && /*#__PURE__*/_jsx(PickersInputBaseActiveBar, {\n      className: classes.activeBar,\n      ref: activeBarRef,\n      ownerState: {\n        sectionOffsets: sectionOffsetsRef.current\n      }\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? PickersInputBase.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Is `true` if the current values equals the empty value.\n   * For a single item value, it means that `value === null`\n   * For a range value, it means that `value === [null, null]`\n   */\n  areAllSectionsEmpty: PropTypes.bool.isRequired,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  /**\n   * If true, the whole element is editable.\n   * Useful when all the sections are selected.\n   */\n  contentEditable: PropTypes.bool.isRequired,\n  'data-multi-input': PropTypes.string,\n  /**\n   * The elements to render.\n   * Each element contains the prop to edit a section of the value.\n   */\n  elements: PropTypes.arrayOf(PropTypes.shape({\n    after: PropTypes.object.isRequired,\n    before: PropTypes.object.isRequired,\n    container: PropTypes.object.isRequired,\n    content: PropTypes.object.isRequired\n  })).isRequired,\n  endAdornment: PropTypes.node,\n  fullWidth: PropTypes.bool,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputRef: refType,\n  label: PropTypes.node,\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  name: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onKeyDown: PropTypes.func.isRequired,\n  onPaste: PropTypes.func.isRequired,\n  ownerState: PropTypes /* @typescript-to-proptypes-ignore */.any,\n  readOnly: PropTypes.bool,\n  renderSuffix: PropTypes.func,\n  sectionListRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      getRoot: PropTypes.func.isRequired,\n      getSectionContainer: PropTypes.func.isRequired,\n      getSectionContent: PropTypes.func.isRequired,\n      getSectionIndexFromDOMElement: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * The components used for each slot inside.\n   *\n   * @default {}\n   */\n  slots: PropTypes.object,\n  startAdornment: PropTypes.node,\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  value: PropTypes.string.isRequired\n} : void 0;\nexport { PickersInputBase };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}