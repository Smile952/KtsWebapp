{"ast":null,"code":"const {\n  Transform\n} = require('readable-stream');\nfunction inherits(fn, sup) {\n  fn.super_ = sup;\n  fn.prototype = Object.create(sup.prototype, {\n    constructor: {\n      value: fn,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2(construct) {\n  return (options, transform, flush) => {\n    if (typeof options === 'function') {\n      flush = transform;\n      transform = options;\n      options = {};\n    }\n    if (typeof transform !== 'function') {\n      // noop\n      transform = (chunk, enc, cb) => cb(null, chunk);\n    }\n    if (typeof flush !== 'function') {\n      flush = null;\n    }\n    return construct(options, transform, flush);\n  };\n}\n\n// main export, just make me a transform stream!\nconst make = through2((options, transform, flush) => {\n  const t2 = new Transform(options);\n  t2._transform = transform;\n  if (flush) {\n    t2._flush = flush;\n  }\n  return t2;\n});\n\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nconst ctor = through2((options, transform, flush) => {\n  function Through2(override) {\n    if (!(this instanceof Through2)) {\n      return new Through2(override);\n    }\n    this.options = Object.assign({}, options, override);\n    Transform.call(this, this.options);\n    this._transform = transform;\n    if (flush) {\n      this._flush = flush;\n    }\n  }\n  inherits(Through2, Transform);\n  return Through2;\n});\nconst obj = through2(function (options, transform, flush) {\n  const t2 = new Transform(Object.assign({\n    objectMode: true,\n    highWaterMark: 16\n  }, options));\n  t2._transform = transform;\n  if (flush) {\n    t2._flush = flush;\n  }\n  return t2;\n});\nmodule.exports = make;\nmodule.exports.ctor = ctor;\nmodule.exports.obj = obj;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}