{"ast":null,"code":"export async function AdminEmployees() {\n  try {\n    const response = await fetch('https://localhost:8080/api/employees');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    var res = await response.json();\n    if (!Array.isArray(res) || res.length === 0) {\n      res = [{\n        id: -1,\n        name: 'empty',\n        post: 'empty'\n      }];\n    }\n    return res;\n  } catch (error) {\n    if (error.message.includes('Failed to fetch')) {\n      console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\n    } else {\n      console.error('Failed to fetch data from the server:', error.message);\n    }\n\n    // Возвращаем дефолтное значение, чтобы не ломать логику\n    return [{\n      id: -1,\n      name: 'empty',\n      post: 'empty'\n    }];\n  }\n}\n_c = AdminEmployees;\nvar _c;\n$RefreshReg$(_c, \"AdminEmployees\");","map":{"version":3,"names":["AdminEmployees","response","fetch","ok","Error","status","res","json","Array","isArray","length","id","name","post","error","message","includes","console","_c","$RefreshReg$"],"sources":["C:/Users/Kheragacy/source/repos/KtsWebApp/KtsWebApp/react-app/src/components/Admin/Employees/AdminEmployees.js"],"sourcesContent":["export async function AdminEmployees() {\r\n    try {\r\n        const response = await fetch('https://localhost:8080/api/employees')\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        var res = await response.json()\r\n\r\n        if (!Array.isArray(res) || res.length === 0) {\r\n            res = [{\r\n                id: -1,\r\n                name: 'empty',\r\n                post: 'empty'\r\n            }]\r\n        }\r\n\r\n        return res\r\n    } catch (error) {\r\n        if (error.message.includes('Failed to fetch')) {\r\n            console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\r\n        } else {\r\n            console.error('Failed to fetch data from the server:', error.message);\r\n        }\r\n\r\n        // Возвращаем дефолтное значение, чтобы не ломать логику\r\n        return [{\r\n            id: -1,\r\n            name: 'empty',\r\n            post: 'empty'\r\n        }]\r\n    }\r\n}"],"mappings":"AAAA,OAAO,eAAeA,cAAcA,CAAA,EAAG;EACnC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;IAEpE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7D;IAEA,IAAIC,GAAG,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAE/B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,IAAIA,GAAG,CAACI,MAAM,KAAK,CAAC,EAAE;MACzCJ,GAAG,GAAG,CAAC;QACHK,EAAE,EAAE,CAAC,CAAC;QACNC,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE;MACV,CAAC,CAAC;IACN;IAEA,OAAOP,GAAG;EACd,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC3CC,OAAO,CAACH,KAAK,CAAC,mFAAmF,CAAC;IACtG,CAAC,MAAM;MACHG,OAAO,CAACH,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACC,OAAO,CAAC;IACzE;;IAEA;IACA,OAAO,CAAC;MACJJ,EAAE,EAAE,CAAC,CAAC;MACNC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;AACJ;AAACK,EAAA,GAjCqBlB,cAAc;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}