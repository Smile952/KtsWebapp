{"ast":null,"code":"const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i) {\n  const entities = {};\n  if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {\n    i = i + 9;\n    let angleBracketsCount = 1;\n    let hasBody = false,\n      comment = false;\n    let exp = \"\";\n    for (; i < xmlData.length; i++) {\n      if (xmlData[i] === '<' && !comment) {\n        //Determine the tag type\n        if (hasBody && isEntity(xmlData, i)) {\n          i += 7;\n          let entityName, val;\n          [entityName, val, i] = readEntityExp(xmlData, i + 1);\n          if (val.indexOf(\"&\") === -1)\n            //Parameter entities are not supported\n            entities[validateEntityName(entityName)] = {\n              regx: RegExp(`&${entityName};`, \"g\"),\n              val: val\n            };\n        } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported\n        else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported\n        else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported\n        else if (isComment) comment = true;else throw new Error(\"Invalid DOCTYPE\");\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i] === '>') {\n        //Read tag content\n        if (comment) {\n          if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n            comment = false;\n            angleBracketsCount--;\n          }\n        } else {\n          angleBracketsCount--;\n        }\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i] === '[') {\n        hasBody = true;\n      } else {\n        exp += xmlData[i];\n      }\n    }\n    if (angleBracketsCount !== 0) {\n      throw new Error(`Unclosed DOCTYPE`);\n    }\n  } else {\n    throw new Error(`Invalid Tag instead of DOCTYPE`);\n  }\n  return {\n    entities,\n    i\n  };\n}\nfunction readEntityExp(xmlData, i) {\n  //External entities are not supported\n  //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n  //Parameter entities are not supported\n  //    <!ENTITY entityname \"&anotherElement;\">\n\n  //Internal entities are supported\n  //    <!ENTITY entityname \"replacement text\">\n\n  //read EntityName\n  let entityName = \"\";\n  for (; i < xmlData.length && xmlData[i] !== \"'\" && xmlData[i] !== '\"'; i++) {\n    // if(xmlData[i] === \" \") continue;\n    // else \n    entityName += xmlData[i];\n  }\n  entityName = entityName.trim();\n  if (entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n  //read Entity Value\n  const startChar = xmlData[i++];\n  let val = \"\";\n  for (; i < xmlData.length && xmlData[i] !== startChar; i++) {\n    val += xmlData[i];\n  }\n  return [entityName, val, i];\n}\nfunction isComment(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') return true;\n  return false;\n}\nfunction isEntity(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') return true;\n  return false;\n}\nfunction isElement(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') return true;\n  return false;\n}\nfunction isAttlist(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'A' && xmlData[i + 3] === 'T' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'L' && xmlData[i + 6] === 'I' && xmlData[i + 7] === 'S' && xmlData[i + 8] === 'T') return true;\n  return false;\n}\nfunction isNotation(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'N' && xmlData[i + 3] === 'O' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'A' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'I' && xmlData[i + 8] === 'O' && xmlData[i + 9] === 'N') return true;\n  return false;\n}\nfunction validateEntityName(name) {\n  if (util.isName(name)) return name;else throw new Error(`Invalid entity name ${name}`);\n}\nmodule.exports = readDocType;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}