{"ast":null,"code":"export async function AdminUsers() {\n  try {\n    const response = await fetch('https://localhost:8080/api/users');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    var res = await response.json();\n    if (!Array.isArray(res) || res.length === 0) {\n      res = [{\n        id: -1,\n        name: 'empty',\n        email: 'empty@example.com',\n        age: 0,\n        registrationDate: '1000-01-01T00:00:00Z'\n      }];\n    }\n    return res;\n  } catch (error) {\n    if (error.message.includes('Failed to fetch')) {\n      console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\n    } else {\n      console.error('Failed to fetch data from the server:', error.message);\n    }\n\n    // Возвращаем дефолтное значение, чтобы не ломать логику\n    return [{\n      id: -1,\n      name: 'empty',\n      email: 'empty@example.com',\n      age: 0,\n      registrationDate: '1000-01-01T00:00:00Z'\n    }];\n  }\n}\n_c = AdminUsers;\nvar _c;\n$RefreshReg$(_c, \"AdminUsers\");","map":{"version":3,"names":["AdminUsers","response","fetch","ok","Error","status","res","json","Array","isArray","length","id","name","email","age","registrationDate","error","message","includes","console","_c","$RefreshReg$"],"sources":["C:/Users/Kheragacy/source/repos/KtsWebApp/KtsWebApp/react-app/src/components/Admin/Users/AdminUsers.js"],"sourcesContent":["export async function AdminUsers() {\r\n    try {\r\n\r\n        const response = await fetch('https://localhost:8080/api/users')\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        var res = await response.json()\r\n\r\n        if (!Array.isArray(res) || res.length === 0) {\r\n            res = [{\r\n                id: -1,\r\n                name: 'empty',\r\n                email: 'empty@example.com',\r\n                age: 0,\r\n                registrationDate: '1000-01-01T00:00:00Z'\r\n            }]\r\n        }\r\n\r\n        return res\r\n    } catch (error) {\r\n        if (error.message.includes('Failed to fetch')) {\r\n            console.error('Connection refused: Could not connect to the server (net::ERR_CONNECTION_REFUSED)');\r\n        } else {\r\n            console.error('Failed to fetch data from the server:', error.message);\r\n        }\r\n\r\n        // Возвращаем дефолтное значение, чтобы не ломать логику\r\n        return [{\r\n            id: -1,\r\n            name: 'empty',\r\n            email: 'empty@example.com',\r\n            age: 0,\r\n            registrationDate: '1000-01-01T00:00:00Z'\r\n        }]\r\n    }\r\n}"],"mappings":"AAAA,OAAO,eAAeA,UAAUA,CAAA,EAAG;EAC/B,IAAI;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;IAEhE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7D;IAEA,IAAIC,GAAG,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAE/B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,IAAIA,GAAG,CAACI,MAAM,KAAK,CAAC,EAAE;MACzCJ,GAAG,GAAG,CAAC;QACHK,EAAE,EAAE,CAAC,CAAC;QACNC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,mBAAmB;QAC1BC,GAAG,EAAE,CAAC;QACNC,gBAAgB,EAAE;MACtB,CAAC,CAAC;IACN;IAEA,OAAOT,GAAG;EACd,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC3CC,OAAO,CAACH,KAAK,CAAC,mFAAmF,CAAC;IACtG,CAAC,MAAM;MACHG,OAAO,CAACH,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACC,OAAO,CAAC;IACzE;;IAEA;IACA,OAAO,CAAC;MACJN,EAAE,EAAE,CAAC,CAAC;MACNC,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE,mBAAmB;MAC1BC,GAAG,EAAE,CAAC;MACNC,gBAAgB,EAAE;IACtB,CAAC,CAAC;EACN;AACJ;AAACK,EAAA,GAtCqBpB,UAAU;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}