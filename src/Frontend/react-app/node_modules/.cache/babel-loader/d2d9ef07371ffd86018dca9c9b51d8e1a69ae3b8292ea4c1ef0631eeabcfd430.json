{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\n/**\n * Generate the props to pass to the hidden input element of the field.\n * It is not used by the non-accessible DOM structure (with an <input /> element for editing).\n * It should be used in the MUI accessible DOM structure and the Base UI implementation.\n * @param {UseFieldHiddenInputPropsParameters} parameters The parameters of the hook.\n * @returns {UseFieldHiddenInputPropsReturnValue} The props to forward to the hidden input element of the field.\n */\nexport function useFieldHiddenInputProps(parameters) {\n  const {\n    manager: {\n      internal_fieldValueManager: fieldValueManager\n    },\n    stateResponse: {\n      // States and derived states\n      areAllSectionsEmpty,\n      state,\n      // Methods to update the states\n      updateValueFromValueStr\n    }\n  } = parameters;\n  const handleChange = useEventCallback(event => {\n    updateValueFromValueStr(event.target.value);\n  });\n  const valueStr = React.useMemo(() => areAllSectionsEmpty ? '' : fieldValueManager.getV7HiddenInputValueFromSections(state.sections), [areAllSectionsEmpty, state.sections, fieldValueManager]);\n  return {\n    value: valueStr,\n    onChange: handleChange\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}