{"ast":null,"code":"import * as Minio from 'minio';\n\n// Instantiate the MinIO client with the object store service\n// endpoint and an authorized user's credentials\n// play.min.io is the MinIO public test cluster\nexport async function save() {\n  const minioClient = new Minio.Client({\n    endPoint: 'http://localhost:9001',\n    port: 9000,\n    useSSL: true,\n    accessKey: '6rh8iEM2d40XwvbdSy65',\n    secretKey: 'zuf+UjIsdfB4P0AUnXALvyV2CSvfxRKK7EnP9vqbMsMF'\n  });\n  const sourceFile = '../../public/images/DevOps/devops.jpg';\n\n  // Destination bucket\n  const bucket = 'images';\n\n  // Destination object name\n  const destinationObject = 'images/devops/devops.jpg';\n\n  // Check if the bucket exists\n  // If it doesn't, create it\n  const exists = await minioClient.bucketExists(bucket);\n  if (exists) {\n    console.log('Bucket ' + bucket + ' exists.');\n  } else {\n    await minioClient.makeBucket(bucket, 'us-east-1');\n    console.log('Bucket ' + bucket + ' created in \"us-east-1\".');\n  }\n\n  // Set the object metadata\n  var metaData = {\n    'Content-Type': 'text/plain',\n    'X-Amz-Meta-Testing': 1234,\n    example: 5678\n  };\n\n  // Upload the file with fPutObject\n  // If an object with the same name exists,\n  // it is updated with new data\n  await minioClient.fPutObject(bucket, destinationObject, sourceFile, metaData);\n  console.log('File ' + sourceFile + ' uploaded as object ' + destinationObject + ' in bucket ' + bucket);\n}","map":{"version":3,"names":["Minio","save","minioClient","Client","endPoint","port","useSSL","accessKey","secretKey","sourceFile","bucket","destinationObject","exists","bucketExists","console","log","makeBucket","metaData","example","fPutObject"],"sources":["C:/Users/Kheragacy/source/repos/KtsWebApp/KtsWebApp/react-app/src/components/minio_connection.js"],"sourcesContent":["import * as Minio from 'minio'\r\n\r\n// Instantiate the MinIO client with the object store service\r\n// endpoint and an authorized user's credentials\r\n// play.min.io is the MinIO public test cluster\r\nexport async function save() {\r\n\r\n    const minioClient = new Minio.Client({\r\n        endPoint: 'http://localhost:9001',\r\n        port: 9000,\r\n        useSSL: true,\r\n        accessKey: '6rh8iEM2d40XwvbdSy65',\r\n        secretKey: 'zuf+UjIsdfB4P0AUnXALvyV2CSvfxRKK7EnP9vqbMsMF',\r\n    })\r\n\r\n    const sourceFile = '../../public/images/DevOps/devops.jpg'\r\n\r\n    // Destination bucket\r\n    const bucket = 'images'\r\n\r\n    // Destination object name\r\n    const destinationObject = 'images/devops/devops.jpg'\r\n\r\n    // Check if the bucket exists\r\n    // If it doesn't, create it\r\n    const exists = await minioClient.bucketExists(bucket)\r\n    if (exists) {\r\n        console.log('Bucket ' + bucket + ' exists.')\r\n    } else {\r\n        await minioClient.makeBucket(bucket, 'us-east-1')\r\n        console.log('Bucket ' + bucket + ' created in \"us-east-1\".')\r\n    }\r\n\r\n    // Set the object metadata\r\n    var metaData = {\r\n        'Content-Type': 'text/plain',\r\n        'X-Amz-Meta-Testing': 1234,\r\n        example: 5678,\r\n    }\r\n\r\n    // Upload the file with fPutObject\r\n    // If an object with the same name exists,\r\n    // it is updated with new data\r\n    await minioClient.fPutObject(bucket, destinationObject, sourceFile, metaData)\r\n    console.log('File ' + sourceFile + ' uploaded as object ' + destinationObject + ' in bucket ' + bucket)\r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA;AACA;AACA,OAAO,eAAeC,IAAIA,CAAA,EAAG;EAEzB,MAAMC,WAAW,GAAG,IAAIF,KAAK,CAACG,MAAM,CAAC;IACjCC,QAAQ,EAAE,uBAAuB;IACjCC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE,sBAAsB;IACjCC,SAAS,EAAE;EACf,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAG,uCAAuC;;EAE1D;EACA,MAAMC,MAAM,GAAG,QAAQ;;EAEvB;EACA,MAAMC,iBAAiB,GAAG,0BAA0B;;EAEpD;EACA;EACA,MAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,YAAY,CAACH,MAAM,CAAC;EACrD,IAAIE,MAAM,EAAE;IACRE,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGL,MAAM,GAAG,UAAU,CAAC;EAChD,CAAC,MAAM;IACH,MAAMR,WAAW,CAACc,UAAU,CAACN,MAAM,EAAE,WAAW,CAAC;IACjDI,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGL,MAAM,GAAG,0BAA0B,CAAC;EAChE;;EAEA;EACA,IAAIO,QAAQ,GAAG;IACX,cAAc,EAAE,YAAY;IAC5B,oBAAoB,EAAE,IAAI;IAC1BC,OAAO,EAAE;EACb,CAAC;;EAED;EACA;EACA;EACA,MAAMhB,WAAW,CAACiB,UAAU,CAACT,MAAM,EAAEC,iBAAiB,EAAEF,UAAU,EAAEQ,QAAQ,CAAC;EAC7EH,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGN,UAAU,GAAG,sBAAsB,GAAGE,iBAAiB,GAAG,aAAa,GAAGD,MAAM,CAAC;AAC3G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}