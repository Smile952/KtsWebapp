{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport Stack, { stackClasses } from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport { textFieldClasses } from '@mui/material/TextField';\nimport { pickersTextFieldClasses } from \"../../PickersTextField/index.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst getChildTypeFromChildName = childName => {\n  if (childName.match(/^([A-Za-z]+)Range(Calendar|Clock)$/)) {\n    return 'multi-panel-UI-view';\n  }\n  if (childName.match(/^([A-Za-z]*)(DigitalClock)$/)) {\n    return 'Tall-UI-view';\n  }\n  if (childName.match(/^Static([A-Za-z]+)/) || childName.match(/^([A-Za-z]+)(Calendar|Clock)$/)) {\n    return 'UI-view';\n  }\n  if (childName.match(/^MultiInput([A-Za-z]+)RangeField$/)) {\n    return 'multi-input-range-field';\n  }\n  if (childName.match(/^SingleInput([A-Za-z]+)RangeField$/) || childName.match(/^([A-Za-z]+)RangePicker$/)) {\n    return 'single-input-range-field';\n  }\n  return 'single-input-field';\n};\nconst getSupportedSectionFromChildName = childName => {\n  if (childName.includes('DateTime')) {\n    return 'date-time';\n  }\n  if (childName.includes('Date')) {\n    return 'date';\n  }\n  return 'time';\n};\n/**\n * WARNING: This is an internal component used in documentation to achieve a desired layout.\n * Please do not use it in your application.\n */\nexport function DemoItem(props) {\n  const {\n    label,\n    children,\n    component,\n    sx: sxProp\n  } = props;\n  let spacing;\n  let sx = sxProp;\n  if (component && getChildTypeFromChildName(component) === 'multi-input-range-field') {\n    spacing = 1.5;\n    sx = _extends({}, sx, {\n      [`& .${textFieldClasses.root}`]: {\n        flexGrow: 1\n      }\n    });\n  } else {\n    spacing = 1;\n  }\n  return /*#__PURE__*/_jsxs(Stack, {\n    direction: \"column\",\n    alignItems: \"stretch\",\n    spacing: spacing,\n    sx: sx,\n    children: [label && /*#__PURE__*/_jsx(Typography, {\n      variant: \"body2\",\n      children: label\n    }), children]\n  });\n}\nDemoItem.displayName = 'DemoItem';\nconst isDemoItem = child => {\n  if (/*#__PURE__*/React.isValidElement(child) && typeof child.type !== 'string') {\n    // @ts-ignore\n    return child.type.displayName === 'DemoItem';\n  }\n  return false;\n};\n/**\n * WARNING: This is an internal component used in documentation to achieve a desired layout.\n * Please do not use it in your application.\n */\nexport function DemoContainer(props) {\n  const {\n    children,\n    components,\n    sx: sxProp\n  } = props;\n  const childrenTypes = new Set();\n  const childrenSupportedSections = new Set();\n  components.forEach(childName => {\n    childrenTypes.add(getChildTypeFromChildName(childName));\n    childrenSupportedSections.add(getSupportedSectionFromChildName(childName));\n  });\n  const getSpacing = direction => {\n    if (direction === 'row') {\n      return childrenTypes.has('UI-view') || childrenTypes.has('Tall-UI-view') ? 3 : 2;\n    }\n    return childrenTypes.has('UI-view') ? 4 : 3;\n  };\n  let direction;\n  let spacing;\n  let extraSx = {};\n  let demoItemSx = {};\n  const sx = _extends({\n    overflow: 'auto',\n    // Add padding as overflow can hide the outline text field label.\n    pt: 1\n  }, sxProp);\n  if (components.length > 2 || childrenTypes.has('multi-input-range-field') || childrenTypes.has('single-input-range-field') || childrenTypes.has('multi-panel-UI-view') || childrenTypes.has('UI-view') || childrenSupportedSections.has('date-time')) {\n    direction = 'column';\n    spacing = getSpacing('column');\n  } else {\n    direction = {\n      xs: 'column',\n      lg: 'row'\n    };\n    spacing = {\n      xs: getSpacing('column'),\n      lg: getSpacing('row')\n    };\n  }\n  if (childrenTypes.has('UI-view')) {\n    // noop\n  } else if (childrenTypes.has('single-input-range-field')) {\n    if (!childrenSupportedSections.has('date-time')) {\n      extraSx = {\n        [`& > .${textFieldClasses.root}, & > .${pickersTextFieldClasses.root}`]: {\n          minWidth: 300\n        }\n      };\n    } else {\n      extraSx = {\n        [`& > .${textFieldClasses.root}, & > .${pickersTextFieldClasses.root}`]: {\n          minWidth: {\n            xs: 300,\n            // If demo also contains MultiInputDateTimeRangeField, increase width to avoid cutting off the value.\n            md: childrenTypes.has('multi-input-range-field') ? 460 : 440\n          }\n        }\n      };\n    }\n  } else if (childrenSupportedSections.has('date-time')) {\n    extraSx = {\n      [`& > .${textFieldClasses.root}, & > .${pickersTextFieldClasses.root}`]: {\n        minWidth: 270\n      }\n    };\n    if (childrenTypes.has('multi-input-range-field')) {\n      // increase width for the multi input date time range fields\n      demoItemSx = {\n        [`& > .${stackClasses.root} > .${textFieldClasses.root}, & > .${stackClasses.root} > .${pickersTextFieldClasses.root}`]: {\n          minWidth: 210\n        }\n      };\n    }\n  } else {\n    extraSx = {\n      [`& > .${textFieldClasses.root}, & > .${pickersTextFieldClasses.root}`]: {\n        minWidth: 200\n      }\n    };\n  }\n  const finalSx = _extends({}, sx, extraSx);\n  return /*#__PURE__*/_jsx(Stack, {\n    direction: direction,\n    spacing: spacing,\n    sx: finalSx,\n    children: React.Children.map(children, child => {\n      if (/*#__PURE__*/React.isValidElement(child) && isDemoItem(child)) {\n        // Inject sx styles to the `DemoItem` if it is a direct child of `DemoContainer`.\n        // @ts-ignore\n        return /*#__PURE__*/React.cloneElement(child, {\n          sx: _extends({}, extraSx, demoItemSx)\n        });\n      }\n      return child;\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}