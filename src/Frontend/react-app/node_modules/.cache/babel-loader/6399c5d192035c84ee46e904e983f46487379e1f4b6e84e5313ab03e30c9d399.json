{"ast":null,"code":"'use strict';\n\nconst Utf8Stream = require('../utils/Utf8Stream');\nclass JsonlParser extends Utf8Stream {\n  static make(options) {\n    return new JsonlParser(options);\n  }\n  static checkedParse(input, reviver, errorIndicator) {\n    try {\n      return JSON.parse(input, reviver);\n    } catch (error) {\n      if (typeof errorIndicator == 'function') return errorIndicator(error, input, reviver);\n    }\n    return errorIndicator;\n  }\n  constructor(options) {\n    super(Object.assign({}, options, {\n      readableObjectMode: true\n    }));\n    this._rest = '';\n    this._counter = 0;\n    this._reviver = options && options.reviver;\n    this._errorIndicator = options && options.errorIndicator;\n    if (options && options.checkErrors) {\n      this._processBuffer = this._checked_processBuffer;\n      this._flush = this._checked_flush;\n    }\n    if (options && 'errorIndicator' in options) {\n      this._processBuffer = this._suppressed_processBuffer;\n      this._flush = this._suppressed_flush;\n    }\n  }\n  _processBuffer(callback) {\n    const lines = this._buffer.split('\\n');\n    this._rest += lines[0];\n    if (lines.length > 1) {\n      this._rest && this.push({\n        key: this._counter++,\n        value: JSON.parse(this._rest, this._reviver)\n      });\n      this._rest = lines.pop();\n      for (let i = 1; i < lines.length; ++i) {\n        lines[i] && this.push({\n          key: this._counter++,\n          value: JSON.parse(lines[i], this._reviver)\n        });\n      }\n    }\n    this._buffer = '';\n    callback(null);\n  }\n  _flush(callback) {\n    super._flush(error => {\n      if (error) return callback(error);\n      if (this._rest) {\n        this.push({\n          key: this._counter++,\n          value: JSON.parse(this._rest, this._reviver)\n        });\n        this._rest = '';\n      }\n      callback(null);\n    });\n  }\n  _suppressed_processBuffer(callback) {\n    const lines = this._buffer.split('\\n');\n    this._rest += lines[0];\n    if (lines.length > 1) {\n      if (this._rest) {\n        const value = JsonlParser.checkedParse(this._rest, this._reviver, this._errorIndicator);\n        value !== undefined && this.push({\n          key: this._counter++,\n          value\n        });\n      }\n      this._rest = lines.pop();\n      for (let i = 1; i < lines.length; ++i) {\n        if (!lines[i]) continue;\n        const value = JsonlParser.checkedParse(lines[i], this._reviver, this._errorIndicator);\n        value !== undefined && this.push({\n          key: this._counter++,\n          value\n        });\n      }\n    }\n    this._buffer = '';\n    callback(null);\n  }\n  _suppressed_flush(callback) {\n    super._flush(error => {\n      if (error) return callback(error);\n      if (this._rest) {\n        const value = JsonlParser.checkedParse(this._rest, this._reviver, this._errorIndicator);\n        value !== undefined && this.push({\n          key: this._counter++,\n          value\n        });\n        this._rest = '';\n      }\n      callback(null);\n    });\n  }\n  _checked_processBuffer(callback) {\n    const lines = this._buffer.split('\\n');\n    this._rest += lines[0];\n    if (lines.length > 1) {\n      try {\n        this._rest && this.push({\n          key: this._counter++,\n          value: JSON.parse(this._rest, this._reviver)\n        });\n        this._rest = lines.pop();\n        for (let i = 1; i < lines.length; ++i) {\n          lines[i] && this.push({\n            key: this._counter++,\n            value: JSON.parse(lines[i], this._reviver)\n          });\n        }\n      } catch (cbErr) {\n        this._buffer = '';\n        callback(cbErr);\n        return;\n      }\n    }\n    this._buffer = '';\n    callback(null);\n  }\n  _checked_flush(callback) {\n    super._flush(error => {\n      if (error) return callback(error);\n      if (this._rest) {\n        try {\n          this.push({\n            key: this._counter++,\n            value: JSON.parse(this._rest, this._reviver)\n          });\n        } catch (cbErr) {\n          this._rest = '';\n          callback(cbErr);\n          return;\n        }\n        this._rest = '';\n      }\n      callback(null);\n    });\n  }\n}\nJsonlParser.parser = JsonlParser.make;\nJsonlParser.make.Constructor = JsonlParser;\nmodule.exports = JsonlParser;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}