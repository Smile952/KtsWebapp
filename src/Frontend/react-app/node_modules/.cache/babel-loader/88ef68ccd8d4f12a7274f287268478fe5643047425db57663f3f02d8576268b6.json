{"ast":null,"code":"'use strict';\n\nconst {\n  Transform\n} = require('stream');\nconst {\n  StringDecoder\n} = require('string_decoder');\nclass Utf8Stream extends Transform {\n  constructor(options) {\n    super(Object.assign({}, options, {\n      writableObjectMode: false\n    }));\n    this._buffer = '';\n  }\n  _transform(chunk, encoding, callback) {\n    if (typeof chunk == 'string') {\n      this._transform = this._transformString;\n    } else {\n      this._stringDecoder = new StringDecoder();\n      this._transform = this._transformBuffer;\n    }\n    this._transform(chunk, encoding, callback);\n  }\n  _transformBuffer(chunk, _, callback) {\n    this._buffer += this._stringDecoder.write(chunk);\n    this._processBuffer(callback);\n  }\n  _transformString(chunk, _, callback) {\n    this._buffer += chunk.toString();\n    this._processBuffer(callback);\n  }\n  _processBuffer(callback) {\n    if (this._buffer) {\n      this.push(this._buffer, 'utf8');\n      this._buffer = '';\n    }\n    callback(null);\n  }\n  _flushInput() {\n    // meant to be called from _flush()\n    if (this._stringDecoder) {\n      this._buffer += this._stringDecoder.end();\n    }\n  }\n  _flush(callback) {\n    this._flushInput();\n    this._processBuffer(callback);\n  }\n}\nmodule.exports = Utf8Stream;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}