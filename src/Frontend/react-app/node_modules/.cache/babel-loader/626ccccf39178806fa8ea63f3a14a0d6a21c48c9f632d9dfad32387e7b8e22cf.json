{"ast":null,"code":"// Build PostPolicy object that can be signed by presignedPostPolicy\nimport * as errors from \"../errors.mjs\";\nimport { isObject, isValidBucketName, isValidObjectName, isValidPrefix } from \"./helper.mjs\";\nexport class PostPolicy {\n  policy = {\n    conditions: []\n  };\n  formData = {};\n\n  // set expiration date\n  setExpires(date) {\n    if (!date) {\n      throw new errors.InvalidDateError('Invalid date: cannot be null');\n    }\n    this.policy.expiration = date.toISOString();\n  }\n\n  // set object name\n  setKey(objectName) {\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name : ${objectName}`);\n    }\n    this.policy.conditions.push(['eq', '$key', objectName]);\n    this.formData.key = objectName;\n  }\n\n  // set object name prefix, i.e policy allows any keys with this prefix\n  setKeyStartsWith(prefix) {\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    this.policy.conditions.push(['starts-with', '$key', prefix]);\n    this.formData.key = prefix;\n  }\n\n  // set bucket name\n  setBucket(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`);\n    }\n    this.policy.conditions.push(['eq', '$bucket', bucketName]);\n    this.formData.bucket = bucketName;\n  }\n\n  // set Content-Type\n  setContentType(type) {\n    if (!type) {\n      throw new Error('content-type cannot be null');\n    }\n    this.policy.conditions.push(['eq', '$Content-Type', type]);\n    this.formData['Content-Type'] = type;\n  }\n\n  // set Content-Type prefix, i.e image/ allows any image\n  setContentTypeStartsWith(prefix) {\n    if (!prefix) {\n      throw new Error('content-type cannot be null');\n    }\n    this.policy.conditions.push(['starts-with', '$Content-Type', prefix]);\n    this.formData['Content-Type'] = prefix;\n  }\n\n  // set Content-Disposition\n  setContentDisposition(value) {\n    if (!value) {\n      throw new Error('content-disposition cannot be null');\n    }\n    this.policy.conditions.push(['eq', '$Content-Disposition', value]);\n    this.formData['Content-Disposition'] = value;\n  }\n\n  // set minimum/maximum length of what Content-Length can be.\n  setContentLengthRange(min, max) {\n    if (min > max) {\n      throw new Error('min cannot be more than max');\n    }\n    if (min < 0) {\n      throw new Error('min should be > 0');\n    }\n    if (max < 0) {\n      throw new Error('max should be > 0');\n    }\n    this.policy.conditions.push(['content-length-range', min, max]);\n  }\n\n  // set user defined metadata\n  setUserMetaData(metaData) {\n    if (!isObject(metaData)) {\n      throw new TypeError('metadata should be of type \"object\"');\n    }\n    Object.entries(metaData).forEach(([key, value]) => {\n      const amzMetaDataKey = `x-amz-meta-${key}`;\n      this.policy.conditions.push(['eq', `$${amzMetaDataKey}`, value]);\n      this.formData[amzMetaDataKey] = value.toString();\n    });\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}